package com.example.charityua_android

import android.os.Bundle
import android.view.Gravity
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.GravityCompat
import androidx.drawerlayout.widget.DrawerLayout
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.charityua_android.databinding.ActivityMainBinding
import kotlinx.coroutines.launch
import retrofit2.HttpException
import java.io.IOException
import androidx.core.content.ContextCompat

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private lateinit var adapter: FundraiserAdapter
    private var allFundraisers: List<Fundraiser> = emptyList()

    private lateinit var drawerLayout: DrawerLayout
    private lateinit var filterSummary: TextView
    private lateinit var resetFiltersButton: Button
    private lateinit var filterAlmostFinished: CheckBox
    private lateinit var categoriesContainer: LinearLayout
    private lateinit var sortOptions: RadioGroup
    private lateinit var sortLabel: TextView
    private lateinit var sortOrderGroup: RadioGroup

    // –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó ‚Äî –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º –º–æ–∂–Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ API
    private val availableCategories = listOf("–ú–µ–¥–∏—Ü–∏–Ω–∞", "–ê—Ä–º—ñ—è", "–¢–≤–∞—Ä–∏–Ω–∏", "–ì—É–º–∞–Ω—ñ—Ç–∞—Ä–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞", "–û—Å–≤—ñ—Ç–∞", "–Ü–Ω—à–µ")

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        drawerLayout = binding.mainDrawerLayout
        filterSummary = findViewById(R.id.filter_summary)
        resetFiltersButton = findViewById(R.id.reset_filters_button)
        filterAlmostFinished = findViewById(R.id.filter_almost_finished)
        filterAlmostFinished.buttonTintList =
            ContextCompat.getColorStateList(this, R.color.checkbox_blue)
        categoriesContainer = findViewById(R.id.filter_categories_container)
        sortOptions = findViewById(R.id.sort_options)
        sortLabel = findViewById(R.id.sort_label)

        val sortByDate = findViewById<RadioButton>(R.id.sort_by_date)
        val sortByRemaining = findViewById<RadioButton>(R.id.sort_by_remaining)

        val blueColor = ContextCompat.getColorStateList(this, R.color.checkbox_blue)
        sortByDate.buttonTintList = blueColor
        sortByRemaining.buttonTintList = blueColor

        sortOrderGroup = findViewById(R.id.sort_order_group)

        val asc = findViewById<RadioButton>(R.id.sort_order_asc)
        val desc = findViewById<RadioButton>(R.id.sort_order_desc)
        asc.buttonTintList = blueColor
        desc.buttonTintList = blueColor

        // –î–∏–Ω–∞–º—ñ—á–Ω–æ –¥–æ–¥–∞—î–º–æ —á–µ–∫–±–æ–∫—Å–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        setupCategoryCheckboxes()

        adapter = FundraiserAdapter(listOf()) {
            Toast.makeText(this, "–í–∏–±—Ä–∞–Ω–æ: ${it.title}", Toast.LENGTH_SHORT).show()
        }

        binding.fundraisersRecycler.layoutManager = LinearLayoutManager(this)
        binding.fundraisersRecycler.adapter = adapter

        loadFundraisers()
        setupDrawerTriggers()
        setupFilterLogic()
    }

    private fun setupCategoryCheckboxes() {
        availableCategories.forEach { name ->
            val checkBox = CheckBox(this)
            checkBox.text = name
            checkBox.setTextColor(getColor(android.R.color.black))
            checkBox.setOnCheckedChangeListener { _, _ ->
                updateFilterSummary()
                applyFilters() // üîπ –û–ù–û–í–õ–ï–ù–ù–Ø
            }
            categoriesContainer.addView(checkBox)
        }
    }

    private fun setupDrawerTriggers() {
        val sortButton = findViewById<ImageButton>(R.id.sort_button)
        val filterBlock = findViewById<LinearLayout>(R.id.filter_block)

        sortButton.setOnClickListener {
            drawerLayout.openDrawer(GravityCompat.START)
        }

        filterBlock.setOnClickListener {
            drawerLayout.openDrawer(GravityCompat.END)
        }
    }

    private fun setupFilterLogic() {
        filterAlmostFinished.setOnCheckedChangeListener { _, _ ->
            updateFilterSummary()
            applyFilters()
        }

        sortOptions.setOnCheckedChangeListener { _, _ ->
            updateSortLabel()
            applyFilters()
        }

        sortOrderGroup.setOnCheckedChangeListener { _, _ ->
            updateSortLabel()
            applyFilters() // üîπ –¢–µ–ø–µ—Ä —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –Ω–∞–ø—Ä—è–º–∫—É
        }

        resetFiltersButton.setOnClickListener {
            filterAlmostFinished.isChecked = false

            for (i in 0 until categoriesContainer.childCount) {
                val view = categoriesContainer.getChildAt(i)
                if (view is CheckBox) view.isChecked = false
            }

            updateFilterSummary()
            applyFilters()
        }
    }

    private fun applyFilters() {
        val selectedCategories = mutableListOf<String>()
        for (i in 0 until categoriesContainer.childCount) {
            val view = categoriesContainer.getChildAt(i)
            if (view is CheckBox && view.isChecked) {
                selectedCategories.add(view.text.toString())
            }
        }

        // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
        var filtered = allFundraisers.filter { fundraiser ->
            val isAlmostFinished = if (filterAlmostFinished.isChecked) {
                val percent = fundraiser.current_amount.toDouble() / fundraiser.goal_amount
                percent >= 0.9
            } else true

            val matchesCategory = if (selectedCategories.isNotEmpty()) {
                selectedCategories.contains(fundraiser.category_name)
            } else true

            isAlmostFinished && matchesCategory
        }

        // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        val sortTypeId = sortOptions.checkedRadioButtonId
        val sortOrderId = sortOrderGroup.checkedRadioButtonId

        val ascending = (sortOrderId == R.id.sort_order_asc)

        filtered = when (sortTypeId) {
            R.id.sort_by_date -> {
                if (ascending) filtered.sortedBy { it.created_at }
                else filtered.sortedByDescending { it.created_at }
            }
            R.id.sort_by_remaining -> {
                if (ascending) filtered.sortedBy { it.goal_amount - it.current_amount }
                else filtered.sortedByDescending { it.goal_amount - it.current_amount }
            }
            else -> filtered
        }

        adapter = FundraiserAdapter(filtered) {
            Toast.makeText(this, "–î–µ—Ç–∞–ª—ñ: ${it.title}", Toast.LENGTH_SHORT).show()
        }
        binding.fundraisersRecycler.adapter = adapter

        updateFilterSummary()
    }

    private fun updateFilterSummary() {
        var count = 0
        if (filterAlmostFinished.isChecked) count++

        for (i in 0 until categoriesContainer.childCount) {
            val view = categoriesContainer.getChildAt(i)
            if (view is CheckBox && view.isChecked) count++
        }

        filterSummary.text = if (count == 0) "–Ω–µ –æ–±—Ä–∞–Ω–æ" else "–æ–±—Ä–∞–Ω–æ ($count)"
    }

    private fun updateSortLabel() {
        val selectedId = sortOptions.checkedRadioButtonId
        val selectedRadio = findViewById<RadioButton>(selectedId)
        sortLabel.text = selectedRadio.text
    }

    private fun loadFundraisers() {
        lifecycleScope.launch {
            try {
                val response = RetrofitClient.instance.getActiveFundraisers()
                if (response.isSuccessful && response.body() != null) {
                    allFundraisers = response.body()!!.filter { it.status == "active" }

                    // üîπ –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —ñ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –æ–¥—Ä–∞–∑—É
                    applyFilters()
                } else {
                    Toast.makeText(this@MainActivity, "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.code()}", Toast.LENGTH_SHORT).show()
                }
            } catch (e: IOException) {
                Toast.makeText(this@MainActivity, "–ü—Ä–æ–±–ª–µ–º–∞ –∑ –º–µ—Ä–µ–∂–µ—é", Toast.LENGTH_SHORT).show()
            } catch (e: HttpException) {
                Toast.makeText(this@MainActivity, "HTTP –ø–æ–º–∏–ª–∫–∞: ${e.message}", Toast.LENGTH_SHORT).show()
            }
        }
    }
}